-- MySQL dump 10.13  Distrib 5.1.34, for unknown-linux-gnu (x86_64)
--
-- Host: localhost    Database: assistant_schema
-- ------------------------------------------------------
-- Server version	5.1.34

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Table structure for table `additionalquestions`
--

DROP TABLE IF EXISTS `additionalquestions`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `additionalquestions` (
  `additionalQuestionID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `studentID` int(10) unsigned NOT NULL,
  `examID` int(10) unsigned NOT NULL,
  `memberID` int(10) unsigned NOT NULL,
  `question` varchar(1000) CHARACTER SET utf8 COLLATE utf8_unicode_ci NOT NULL,
  PRIMARY KEY (`additionalQuestionID`),
  KEY `studentIDForAdditionalQuestions` (`studentID`),
  KEY `examIDForAdditionalQuestions` (`examID`),
  KEY `memberIDForAdditionalQuestions` (`memberID`),
  CONSTRAINT `examIDForAdditionalQuestions` FOREIGN KEY (`examID`) REFERENCES `exams` (`examID`) ON UPDATE CASCADE,
  CONSTRAINT `memberIDForAdditionalQuestions` FOREIGN KEY (`memberID`) REFERENCES `sacmembers` (`memberID`) ON UPDATE CASCADE,
  CONSTRAINT `studentIDForAdditionalQuestions` FOREIGN KEY (`studentID`) REFERENCES `students` (`studentID`) ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `additionalquestions`
--

LOCK TABLES `additionalquestions` WRITE;
/*!40000 ALTER TABLE `additionalquestions` DISABLE KEYS */;
/*!40000 ALTER TABLE `additionalquestions` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `cards`
--

DROP TABLE IF EXISTS `cards`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `cards` (
  `cardNumber` int(10) unsigned NOT NULL,
  `questions` varchar(1500) CHARACTER SET utf8 COLLATE utf8_unicode_ci DEFAULT NULL,
  PRIMARY KEY (`cardNumber`) USING BTREE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `cards`
--

LOCK TABLES `cards` WRITE;
/*!40000 ALTER TABLE `cards` DISABLE KEYS */;
INSERT INTO `cards` VALUES (1,'1.Система типов данных языка высокого уровня: скалярные стандартные и пользовательские типы данных, тождественность и совместимость типов данных, массивы, множества, записи (структуры, объединения),  файлы, последовательный и прямой доступ к компонентам файлов.\n2.Принципы функционального программирования: программирование при помощи функций, функциональность, основные свойства функциональных языков, язык программирования Лисп, рекурсия.\n3.  Спецификация программного обеспечения при использовании UML: модель использования, логическая модель, модель реализации, модель процессов, модель развертывания; варианты использования: основные, вспомогательные, дополнительные, краткая и подробная формы описания; диаграммы вариантов использования – прецедентов (uses case diagrams): действующее лицо, вариант использования, связь; связи использования и расширения.\n'),(2,'1. Динамический тип данных, линейные динамические структуры данных: стек, очередь, списки;  нелинейные динамические структуры данных: мультисписки, деревья.\n2.  Функционалы: функциональное значение функции, способы композиции функций, функции более высокого порядка. \n3. Уровни моделирования предметной области: концептуальный, спецификации, реализации; контекстные диаграммы классов (class diagrams); диаграмма последовательностей системы (seguence diagrams), системные события и операции, описание системной операции; диаграммы деятельностей (activity diagrams) этапа анализа требований и уточнения спецификаций.\n'),(3,'1. Процедуры и функции: описание, вызов, передача параметров, программирование рекурсивных алгоритмов.\n2. Принципы логического программирования: понятие логической программы, основные конструкции,  факты, правила, вопросы, логические переменные, подстановки, абстрактный интерпретатор, значение логической программы, вычислительная модель логических программ, ПРОЛОГ как система, реализующая логический вывод в исчислении предикатов первого порядка.\n3. Проектирование структуры программного обеспечения при объектном подходе: стереотипы классов – классы сущности, классы интерфейсы, управляющие классы, исключения, пакеты классов; диаграмма пакетов (package diagrams).\n'),(4,'1. Основы доказательства правильности программ: метод мате¬матической индукции, принципы простой и модифицированной индукции, доказательство правильности схем программ, метод индуктивных утверждений.\n2. Согласование целевых утверждений: диаграмма успешного доказательства целевых утверждений, доказательство целевых утверждений при использовании механизма возврата, правила установления соответствия, недетерминизм, понятие \"связанной\" переменной, операционная модель вычисления ПРОЛОГ-программ, ПРОЛОГ и математическая логика.\n3. Определение отношений между объектами: диаграмма последовательностей действий – обозначение объектов и сообщений, синхронные и асинхронные сообщения, линии жизни объектов, активации объекта, уничтожение объекта, разрыв линии жизни; диаграмма кооперации (collaboration diagrams) – обозначение объектов и потоков данных, варианты реализации сценария.\n'),(5,'1. Отображение графической информации: интерактивная компьютерная графика, деловая, иллюстративная графика, обработка образов в машинном зрении, основы теории цвета, цветовые системы RGB, CMYK, VHS, методы формирования цвета,  основные виды графики (растровая, векторная, фрактальная), основные стандарты компьютерной графики.\n2.  Рекурсивное представление данных и программ: построение рекурсивных программ, граничные условия и способы использования рекурсии, структуры и деревья, список как частный вид структуры, формы записи списков, работа со списками, примеры программ с рекурсивными определениями.\n3.  Определение отношений между классами: ассоциация, обобщение, агрегация, композиция, направление ассоциации, абстрактные классы и методы, параметризованные классы, связывание классов, обозначение связывания; классы интерфейсы.\n'),(6,'1. Аппаратные средства компьютерной графики: устройства графического ввода/вывода информации, аппаратная организация графических подсистем, графические карты, акселераторы, организация видеопамяти, устройства формирования видеосигнала, основные режимы работы графических карт.\n2.  Встроенные предикаты: добавление и исключение утверждений, классификация термов, изменение и анализ утверждений, работа со структурами произвольного вида, воздействие на процесс возврата, реализация сложных способов выражения целевых утверждений, объявление операторов, обработка файлов, наблюдение за выполнением программы на ПРОЛОГе.\n3.  Проектирование классов: структура объектов – атрибуты и операции класса, полное описание атрибута, полное описание операции, ответственность класса; диаграмма состояний объекта (statechart diagrams); диаграмма деятельностей методов класса; диаграмма компонентов (component diagrams); диаграмма размещения (deployment diagrams).\n'),(7,'1. Алгоритмы растровой графики: основные растровые алгоритмы, отрисовка точки через BIOS, прямая запись в видеопамять посредством API операционной системы, отрисовка отрезка  алгоритмом Брезенхема, построение растровой развертки окружности и эллипса, алгоритмы заливки замкнутых фигур с границей заданного цвета, понятие связности, заливка многоугольников, аффинные преобразования, однородные координаты, повороты, сдвиги, переносы в матричном виде, проецирование трехмерных объектов, виды проекций, использование матричного вида при проецировании, особенности проецирования гладких поверхностей.\n2. Основные идеи и сущность ООП: использование объекта в качестве основной компоненты программы и децентрализация управления, реализуемая представлением программы совокупностью взаимодействующих объектов, моделирование поведения объектов реального мира, наглядное представление объектов, создание и использование АТД, производные АТД.\n3.  Основные принципы и стадии тестирования; ручное тестирование – статический и динамический подход, методы ручного тестирования: тестирование исходного текста, сквозные просмотры, проверка за столом, оценки программ; стратегии тестирования: структурный подход – методы «белого» ящика, функциональный подход – методы «черного» ящика.\n'),(8,'1. Трехмерная графика: алгоритмы отсечения нелицевых граней, ограничивающие тела, разбиение пространства, удаление невидимых линий алгоритмом Робертса, количественная невидимость, алгоритм Аппеля, удаление невидимых граней методом Z-буффера, метод трассировки лучей, алгоритмы упорядочивания граней методом художника, методы двоичного разбиения пространства, алгоритм Варнока, специальные методы оптимизации, метод порталов, потенциально видимые множества граней.\n2.  Основные концепции ООП: инкапсуляция и расширяемость типов, семантика объекта - данные как отражение состояния объекта и методы как средства обеспечения взаимодействия объектов; представление данных, классификация методов -  конструкторы, деструкторы, селекторы, модификаторы; классы и абстрактные типы данных, наглядное представление классов, объекты как экземпляры классов, основные действия с объектами - создание, инициализация, обработка, разрушение.\n3.  Структурное тестирование (тестирование маршрутов) – критерии формирования тестовых наборов: покрытие операторов,  покрытие решений (переходов), покрытие условий,  покрытие решений/условий, комбинаторное покрытие условий.\n'),(9,'1. Элементы виртуальной реальности: физические и  психологические  факторы,  учитываемые  при  создании реалистичных изображений, простая модель освещения, методы закрашивания Гуро, Фонга, расчет освещенности сцен, текстурирование поверхностей, общий метод и частные случаи, пирамидальное фильтрование, прикладное использование трехмерной машинной графики и реалистических изображений.\n2.  Классы: компонентные данные, компонентные функции, способы задания доступа, синтаксическая структура определения класса, объявление, определение и инициализация объектов, объекты объявленные как константы, область видимости класса, указатель this, компонентные функции типа static и const (статические и постоянные компонентные функции), тестирование класса.\n3.  Функциональное тестирование (тестирование с управлением по данным) – критерии формирования тестовых наборов: эквивалентное разбиение, анализ граничных значений, анализ причинно-следственных связей, предположение об ошибке.\n'),(10,'1. Архитектура ЭВМ, периферийные устройства, организация ввода-вывода информации.\n2.  Создание и уничтожение объектов: конструкторы – назначение; наличие нескольких конструкторов у одного класса - причины, разделение функций; способы задания конструктора - по умолчанию или явное; вызов конструктора - назначение, способы реализации, задание аргументов; явный и автоматический вызовы - ситуации использования, рекомендации по применению; деструкторы - назначение, основные свойства; способы задания - по умолчанию или явное; вызов деструктора - назначение, способы реализации; явный и автоматический вызовы - ситуации использования, рекомендации по применению; отладка и тестирование системы конструкторов и деструкторов.\n3. Тестирование модулей: восходящее, нисходящее, комбинированное, модули-заглушки, тестирование специалистами–тестерами, документирование тестирования, регрессионное тестирование, комплексное тестирование, критерии завершения тестирования, оценочное - системное тестирование.\n'),(11,'1. Системы ЭВМ: вычислительные системы и сети, сопроцессоры,  мультипроцессорные вычислительные системы, матричные и конвейерные вычислительные системы, связные устройства, модемы, протоколы обмена.\n2. Специальный полиморфизм: перегрузка функций, алгоритм выбора перегруженной функции, дружественные функции, перегрузка операторов - синтаксис, семантика, приоритет и порядок выполнения, доступные и недоступные для перегрузки операторы, перегружаемые как обычные функции, только как компонентные функции.\n3. Отладка ПО: классификация ошибок, методы отладки ПО - ручного тестирования, индукции, дедукции, обратного прослеживания; методы и средства получения дополнительной информации об ошибке - отладочный вывод, интегрированные средства отладки, независимые отладчики; общая методика отладки ПО - изучение проявления ошибки, локализация ошибки, определение причины ошибки, исправление ошибки, повторное тестирование.\n'),(12,'1. Понятие процесса: параллельные и псевдопараллельные процессы, диаграмма состояний процесса;  взаимодействие процессов: синхронизация, взаимоисключение, взаимоблокировка, коммуникация между процессами; реализация мультипрограммирования: прерывания, механизмы реализации, супервизор, системные и пользовательские процессы.\n2.   Параметрический полиморфизм: шаблонные классы и шаблонные функции - назначение, параметризованные типы данных, синтаксис и семантика.\n3. Цель испытаний, виды испытаний в жизненном цикле ПО - опытного образца, рабочей версии, модернизированной версии; категории испытаний - функциональные, стрессовые, использования ресурсов ЭВМ, параллельного решения задач; испытания программ на надежность - прямые экспериментальные методы  определения показателей надежности программ в условиях нормального функционирования, форсированные методы испытаний реальных систем на надежность; достоверность испытаний - методическая и статистическая достоверность; документирование результатов испытаний - исходные и отчетные документы при испытаниях программ: техническое задание, государственные и отраслевые стандарты, программа испытаний, методики испытаний, протоколы испытаний, акт испытаний.\n'),(13,'1.  Структура ядра ОС: монолитное ядро, микроядро; планирование и диспетчеризация: планирование с переключением и без переключения, выбор величины кванта, алгоритмы планирования (FIFO, RR, SJF, SRT, HNR), многоуровневое планирование.\n2.  Наследование и иерархия классов: реализация механизма повторного использования кода, полиморфная обработка родственных объектов – чистый полиморфизм, отношения наследования, построение производного класса специализацией базового, построение базового класса обобщением производного, иерархия классов, наследование интерфейса, наследование реализации, виртуальные функции, абстрактные базовые классы, множественное наследование, тестирование системы классов, связанных отношением наследования.\n3.  Планирование и организация разработки программных систем: принципы планирования разработки,  принципы организации коллектива программистов и распределения работ по специалистам; методы  бригадной организации работ; внедрение и эксплуатация ПО, процесс сопровождения: модификация, усовершенствование и коррекция ПО; планирование и организация сопровождения, методы конфигурационного управления; тиражирование и использование версий программ, сертификация ПО.\n'),(14,'1.  Монопольный доступ и взаимоисключение: обеспечение монопольного доступа к разделяемым ресурсам, семафоры, синхронизация при помощи семафоров, мониторы (кольцевой буфер, читатели и писатели), событийная синхронизация. \n2.  Разработка объектно-ориентированных программ: конструирование иерархий классов - принципы построения, рекомендации, примеры; создание и использование объектов во время исполнения программы, организация массивов объектов;  использование конструкторов, вызывающих другие конструкторы, методика тестирования объектно-ориентированных программ.\n3.  Сборочное программирование, основы компонентной объектной модели (COM): организация интерфейса COM, базовый интерфейс COM-IUnknown, серверы COM-объектов, создание и повторное использование COM-объектов, маршалинг и демаршалинг.\n'),(15,'1.  Тупики: условия возникновения, методы борьбы, стратегия Ханвендера; метод редукции графа - представление состояний системы в виде направленных графов; представление графа – матричное, с помощью связного списка; алгоритмы обнаружения тупиков - метод прямого обнаружения, алгоритм со счетчиком ожиданий; обход тупиков - алгоритм банкира; обнаружение и восстановление работоспособности системы.\n2.   Обработка исключений: запуск исключений, перезапуск исключений, выражения исключений, спецификация исключения, пробные блоки try, обработчики исключений catch, иерархии классов для управления исключительными ситуациями, обработка исключений как механизм восстановления после сбоев и как механизм передачи управления, модель завершения, используемая в С++.\n3.  Типы пользовательских интерфейсов и этапы их разработки, психофизические особенности человека, связанные с восприятием, запоминанием и обработкой информации.\n'),(16,'1.  Иерархия памяти: уровни иерархии, вертикальное и горизонтальное управление, распределение основной памяти, особенности основной памяти как ресурса ВС, алгоритмы распределения памяти, защита памяти. \n2.  Элементы теории асинхронных процессов: концепция процесса, основные определения, глобальные свойства - параллельность, синхронность, недетерминизм; физическое и событийное время, понятие алгебры над   процессами; модели вычислительных процессов - автоматные модели, способы задания и построения.\n3.  Пользовательская и программная модели интерфейса, процесс проектирования пользовательского интерфейса, критерии оценки интерфейса пользователем; классификация диалогов и общие принципы их разработки.\n\n'),(17,'1. Виртуальная память: страничная, сегментная, сегментно-страничная организация памяти, коллективное использование и защита информации; файлы, отображаемые в память.\n2. Основы специальной теории сетей: синтаксис и семантика сетей Петри,  модельная и предметная интерпретация, определение, способы задания сетей Петри, понятие выполнения сети, основные соглашения выполнения сети, пространство состояний, множество и граф  достижимости, динамические свойства сетей, анализ сетей; сетевая объектная модель процессов, ее особенности и отличие от автоматной модели. \n3.   Основные компоненты графических пользовательских интерфейсов: рабочая область, фон, узор, фоновый рисунок, заставка, окна, пиктограммы; прямое манипулирование изображением, компоненты ввода-вывода.\n'),(18,'1. Файловая система ОС: состав, управление, типы файловых систем; логическая и физическая организация файла, методы доступа, операции над файлами, отображаемые файлы.\n2. Элементы теории вычислимости: вычислимость и разрешимость, интуитивное и точное понятие алгоритма, вычислимые функции, машина Тьюринга, массовые алгоритмические проблемы. \n3. Стандартизация пользовательского интерфейса: классификация управляющих средств пользовательского интерфейса, стандарты ISO на пользовательский интерфейс WIMPS, качество интерфейса – эргономический аспект; системы поддержки  работы в группе - групповая работа в локальных и глобальных сетях, системы семинаров, работа с фреймами и мультидоступ, вопросы синхронизации группового взаимодействия; оценка функционирования - цели и стили оценивания, оценка на этапе проектирования, формальные методы анализа диалога на тупики, оценка реализации, оценка времени реакции, целостность диалога, комплексирование методов оценки, оценка полезности.\n'),(19,'1.  Реляционный подход к организации баз данных: фундаментальные свойства отношений, реляционная модель данных, реляционная алгебра, реляционное исчисление, проектирование реляционных баз данных с использованием нормализа¬ции, семантическое моделирование данных, ER-диаграммы.\n2.  Формальные языки и грамматики: универсальное множество цепочек над конечным алфавитом, формальный язык как множество цепочек, операции над языками, определение формального языка и формальной грамматики, теория формальных грамматик как математический аппарат для изучения синтаксиса языков программирования, классификация формальных языков и грамматик по порождающей способности. \n3.  Архитектура и основные составные части систем ИИ: различные подходы к построению систем ИИ (логический, структурный, эволюционный, имитационный) и методы представления знаний; вспомогательные системы (распознавания образов, идентификации, моделирования, жесткого программирования) и их место в системах ИИ.\n'),(20,'1. Управление транзакциями, сериализация транзакций (синхронизационные захваты, метод временных меток), изолированность пользовате¬лей.\n2.  Синтаксический анализ: роль синтаксического анализатора, контекстно-свободные грамматики (КС-грамматики) как основной инструмент формального изучения синтаксиса языков программирования: определение КС-грамматики, дерево вывода в КС-грамматике, однозначность КС-грамматик и языков, связь между КС-языками и МП-автоматами, автоматы с магазинной памятью, описание, функционирование, способы задания МП-автомата, недетерминированные и детерминированные МП-автоматы.\n3.  Системы распознавания образов (идентификации): обучение распознаванию образов, геометрический и структурный подходы, гипотеза компактности, адаптация и обучение. \n'),(21,'1. Журнализация изменений БД: журнализация и буферизация, индивидуальный откат транзакции, восстановление после мягкого сбоя, физическая согласованность базы данных, восстановление после жесткого сбоя.\n2. Лексический анализ: роль лексического анализатора, взаимосвязь лексического и синтаксического анализаторов, принципы построения  и функции лексического анализатора, связь лексического анализа, автоматных грамматик  и конечных автоматов, конечные автоматы и распознаватели, недетерминированные и детерминированные конечные автоматы, преобразования конечных автоматов, цель этих преобразований.\n3. Представление знаний, рассуждений и задач; эпистомологическая полнота представления знаний и эвристически эффективные стратегии поиска решения задач; модели представления знаний: алгоритмические, логические, сетевые и продукционные модели; сценарии.\n'),(22,'1.  Язык SQL: функции и основные возможности, SEQUEL/SQL СУБД System R, типы данных, средства определения схемы, структура запросов, табличное выражение, агрегатные функции и ре¬зультаты запросов, язык модулей, встроенный SQL, набор операторов манипулирования данными, динамический SQL в Oracle V.6.\n2.  Общие алгоритмы синтаксического анализа: нисходящие методы синтаксического анализа, метод рекурсивного спуска, предиктивный синтаксический анализатор, определение LL(k)-грамматики, алгоритм раз¬бора для LL(1)-грамматик, алгоритм построения управляющей таблицы для LL(1)-грамматики, сравнительный анализ нисходящих методов синтаксического анализа.\n3.  Методы обучения распознаванию образов - персептроны, нейронные сети, метод потенциальных функций, метод группового учета аргументов, метод предельных упрощений, коллективы решающих правил; методы и алгоритмы анализа структуры многомерных данных - кластерный анализ, иерархическое группирование.\n'),(23,'1. Архитектура \"клиент-сервер\": открытые системы, клиенты и серверы локальных сетей, системная архитектура \"клиент-сервер\", серверы баз данных.\n2. Общие алгоритмы синтаксического анализа: методы восходящего синтаксического анализа, табличные методы синтаксического анализа, формальное определение алгоритма разбора типа \"перенос-сверт¬ка\", определение LR(k)-грамматики, алгоритм раз¬бора для LR(k)-грамматик, алгоритм построения управляющей таблицы, преимущества класса LR(k)-грамматик перед другими методами синтаксического анализа. \n3. Эволюционные методы поиска решений: метод группового учета аргументов,  генетический алгоритм.\n'),(24,'1. Распределенные БД: разновидности распределенных систем, распределенная СУБД System R, интегрированные или федеративные системы и мультибазы данных.\n2. Общие принципы генерации кода: формальные методы описания перевода, внутренние формы программы: польская инверсная запись, представление основных конструкций языков программирования в польской инверсной записи, тетрады, триады, представление основных конструкций языков программирования с использованием тетрад и триад, косвенные триады, синтаксические деревья, ассемблерный код, особенности всех форм представления, их сравнительный анализ.\n3.  Общие алгоритмы синтаксического анализа: методы восходящего синтаксического анализа, табличные методы синтаксического анализа, формальное определение алгоритма разбора типа \"перенос-сверт¬ка\", грамматики простого и операторного предшествова¬ния, понятие отношений «<∙  ,   ∙>,  ∙ =  » между символами грамматики, особенности построения таблиц разбора, сравнительный анализ класса грамматик предшествования с другими классами грамматик.\n'),(25,'1. Объектно-ориентированные СУБД: связь объектно-ориентированных СУБД с общими понятиями объект¬но-ориентированного подхода, объектно-ориентированные модели данных, языки программирования объектно-ориентированных баз данных, языки запросов объектно-ориентированных баз данных, примеры объектно-ориентированных СУБД.\n2. Иерархия  уровней  обработки информации в ВС: концептуальный уровень, уровень высокоуровневых языков, уровень машинных команд, уровень регистровых передач, уровень комбинационных схем, семантический разрыв между уровнями и способы его устранения.\n3. Экспертные системы: классификация и структура; инструментальные средства проектирования, разработки и отладки; этапы разработки; примеры реализации.\n'),(26,'1   Передача дискретных данных: линии связи, методы передачи дискретных данных на физическом уровне, методы передачи данных канального уровня, методы коммутации.\n2. Высокопроизводительные вычислительные системы: определение понятия  высокопроизводительной вычислительной системы (ВВС), основные цели создания ВВС, факторы, определяющие высокую стоимость ВВС, основные методы достижения высокого быстродействия.\n3.  Архитектуры реализации корпоративных информационных систем на платформах Sun, Microsoft, Linux.\n'),(27,'1. Локальные сети: протоколы и стандарты локальных сетей, протокол LLC уровня управления логическим каналом (802.2), технология Ethernet (802.3), технология Token Ring (802.5), технология FDDI, Fast Ethernet и lOOVG-AnyLAN как развитие технологии Ethernet, высокоскоростная технология Gigabit Ethernet. \n2. Организация параллельных вычислений: естественный  параллелизм, параллелизм  множества  объектов, параллелизм  независимых  ветвей, параллелизм  смежных  операций, искусственный параллелизм, преобразование типов параллелизма.\n3. Обработка ORACLE различных типов команд SQL и предложений PL/SQL, поддержание целостности данных, использование процедур и пакетов, использование триггеров базы данных, управление зависимостями между объектами схемы.\n'),(28,'1.   Построение локальных сетей по стандартам физического и канального уровней: структурированная кабельная система, концентраторы и сетевые адаптеры, логическая структуризация сети с помощью мостов и коммутаторов, техническая реализация и дополнительные функции коммутаторов.\n2.   Архитектура вычислительных систем: многомашинные и многопроцессорные ВС, методы и  средства организации многомашинных ВС, классификация  многопроцессорных ВС, архитектура скалярных и векторных ВС, архитектуры параллельных ВС, матричные процессоры на основе систолических и волновых матриц.\n3.   Политика защиты приложений: роли и управление привилегиями приложений, включение ролей приложений, управление привилегиями и ролями, создание, включение, выключение и удаление ролей, назначение и отзыв привилегий и ролей.\n'),(29,'1. Построение больших сетей: принципы объединения сетей на основе протоколов сетевого уровня, адресация в IP-сетях, протокол IP, протоколы маршрутизации в IP-сетях, средства построения составных сетей стека Novell, основные характеристики маршрутизаторов и концентраторов.\n2. Принципы организации памяти ВС: иерархическая организация памяти ВС, виртуальная  память, защита памяти, назначение и принцип работы кэш памяти, кэш уровни L1 и L2,  ассоциативный кэш, множественно ассоциативный кэш, кэш с прямым отображением, стратегии записи, буфер записи, стратегии замены строк,   синхронизация КЭШей в мультипроцессорных системах.\n3. Основные концепции ОС семейства Windows NT: особенности установки, конфигурирования, администрирования, оптимизации производительности.\n\n'),(30,'1. Глобальные сети: основные понятия и определения, глобальные связи на основе выделенных линий, глобальные связи на основе сетей с коммутацией каналов, компьютерные глобальные сети с коммутацией пакетов, удаленный доступ.\n2. Топологические структуры ВС и системы коммутации: древовидные сети, шины, конвейеры, процессоры быстрого преобразования Фурье типа \"бабочка\",  сети перекрестного обмена, гиперкубы, решетки, кольца, цилиндры, тороиды, пирамидальные сети, основные требования к системам коммутации. Шины расширения. ISA, EISA, PnP, PCI., SCSI., USB, FireWire.\n3. Администрирование удаленного доступа к сетям Windows,  взаимодействие с сетями TCP/IP, взаимодействие с сетями NetWare, средства просмотра сетевых ресурсов.\n'),(31,'1.  Средства анализа и управления сетями: функции и архитектура систем управления сетями, стандарты систем управления, мониторинг и анализ локальных сетей.\n2.  Основные функциональные компоненты архитектуры ВВС: процессоры с сокращенным набором команд (RISC), концепция RISC и CISC процессоров, типовая система команд RISC процессора, регистровые окна, микропроцессоры, транспьютеры.  систолические и волновые матрицы, память - расширение локальной памяти, расслоение обращений к памяти, процессоры цифровой обработки сигналов.\n3.  Основные концепции ОС UNIX/Linux, средства графического интерфейса пользователей, основные механизмы и компоненты ядра, программирование в среде UNIX /Linux.\n'),(32,'1. Криптографические методы защиты информации: типовые модели криптографической защиты информации, симметричное шифрование,  криптографически стойкие контрольные суммы и генераторы псевдослучайных чисел (ГПСЧ), асимметричное шифрование и электронная цифровая подпись (ЭЦП).\n2. Жизненный цикл программного обеспечения, процессы жизненного цикла, связь между процессами: основные, вспомогательные, организационные процессы, модели и стадии жизненного цикла, взаимосвязь между стадиями и процессами, матрица фазы-функции.\n3. Основные концепции ОС NetWare, проектирование Novell Directory Services, поддержка ОС NetWare.\n'),(33,'1. Безопасность компьютерных сетей: протоколы сетевой безопасности, программно-аппаратные комплексы защиты сетей.\n2. Метод и технология проектирования программного обеспечения: требования к технологии, формализация и автоматизация стадий и этапов жизненного цикла, стандартизация процесса проектирования и разработки - стандарт проектирования, стандарт оформления проектной документации, стандарт интерфейса пользователя, государственные стандарты, стандарты предприятия; эффективность технологии проектирования программного обеспечения: критерии оценки технологии проектирования – функциональные, конструктивные; основные затраты в жизненном цикле, распределение затрат на разработку, длительность разработки программного обеспечения.\n3.  Администрирование ОС NetWare, дополнительные средства ОС NetWare: средства защиты NDS для NT, встроенные утилиты администрирования сети.\n\n'),(34,'1.   Безопасность современных ОС и программных комплексов, вредоносные программы, системы обнаружения вторжений, комплексный подход к проектированию и анализу защищенных ИС.\n2.   Оценка качества процессов создания программного обеспечения: международные стандарты серии ISO 9000, CMM, SPICE; качество программного обеспечения, управление качеством, общие характеристики качества программного обеспечения: функциональность, надежность, удобство использования, эффективность, сопровождаемость, мобильность; критерии качества, ранжированные по фазам жизненного цикла, метрики характеристик программного обеспечения.\n3.  Средства и методологии проектирования, разработки и сопровождения файл-серверных приложений: традиционные средства и методологии разработки файл-серверных приложений, новые средства разработки файл-серверных приложений, перенос файл-серверных приложений в среду клиент-сервер\n'),(35,'1. Взаимодействие операционной системы и BIOS с периферийными устройствами: уровни взаимодействия с периферийными устройствами, работа на уровне портов ввода-вывода, работа на уровне BIOS, работа на уровне ОС; функционирование резидентных программ.\n2.   Понятийный аппарат метрической теории программ – принципы количественного анализа качества объектов с расплывчатыми свойствами: модели и метрики оценки сложности Боэма, Холстэда, Мак-Кейба (основанные на потоковых графах), модель и метрики, основанные на информационных потоках; методы оценки качества программного обеспечения: анкетирование, рабочие списки, контрольные задачи, метрики; государственные стандарты в области оценки качества программного обеспечения.\n3.   Средства и методологии проектирования, разработки и сопровождения клиент-серверных приложений: базовые средства построения ИС в архитектуре «клиент-сервер», серверы баз данных, язык SQL – базовый интерфейс SQL-сервера, классический подход к проектированию реляционных баз данных, CASE-системы для проектирования ИС.\n'),(36,'1.  Алгоритмы сжатия данных: алгоритмы сжатия символьного уровня, алгоритмы сжатия фонетического уровня, алгоритмы сжатия словарного уровня.\n2.  Модули, сцепление и связность - критерии независимости модулей, библиотеки ресурсов; нисходящий и восходящий подход к разработке программного обеспечения, средства описания структурных алгоритмов: базовые и дополнительные алгоритмические структуры, псевдокоды, Flow-формы, диаграммы Насси-Шнейдермана; программирование с защитой от ошибок: проверка выполнения операций, контроль промежуточных результатов, снижение погрешностей результатов, обработка исключений; сквозной структурный контроль.\n3.   Информационные системы, основанные на использовании «складов данных»: проблема интеграции данных, подходы и имеющиеся решения; выбор архитектуры распределенной системы: сетевые операционные системы, возможность создания разнородной информационной среды, общая структура технических средств - локальные, городские, глобальные вычислительные сети; тенденции развития, использование суперсерверов.\n'),(37,'1. Защищенный режим процессора Intel 80386: страничная адресация, переключение контекста, использование возможностей защищенного режима различными ОС. \n2.  Разработка и анализ требований к программному обеспечению: определение целей проектируемого программного обеспечения, определение целей управления проектом; техническое задание и спецификации программного обеспечения; функциональные и нефункциональные требования; технологические требования: выбор архитектуры ПО, выбор типа пользовательского интерфейса, выбор подхода к разработке, выбор языка и среды программирования; планирование процесса проектирования, виды планов: календарный, индивидуальный, сетевой график разработки и проектирования программного обеспечения.\n3.  Базовые стандарты и протоколы WWW: стандарты и протоколы передачи данных, форматы файлов Internet, используемые в WWW стандарты хранения данных, принципы поиска информации в Internet, использование поисковых систем, поиск тематической информации, путеводители по ресурсам.\n'),(38,'1.  Сетевое программирование в ОС Microsoft Windows: семиуровневая модель взаимодействия открытых систем OSI, спецификация Windows Sockets, программирование взаимодействия на уровне транспортных протоколов UDP и TCP.\n2.  Структурный подход к проектированию программного обеспечения: основные принципы, лежащие в основе структурного подхода, средства описания функциональной структуры, средства описания отношения между данными, применение средств на стадиях жизненного цикла программного обеспечения; спецификации ПО при структурном подходе: формальные модели, зависящие от подхода к разработке и не зависящие от подхода – диаграммы переходов состояний, математические модели предметной области.\n3.  Язык гипертекстовой разметки HTML: фреймы, создание многооконного интерфейса. использование HTML для определения полей заголовка сообщения протокола http, программирование сценариев просмотра JavaScript; Java, JavaScript и модули расширения, расширение возможностей создания таблиц.\n'),(39,'1.  Абстрактный тип данных. Линейные  и нелинейные структуры данных. Стек, очередь, списки, деревья, графы.\n2.  Метод функционального моделирования SADT, функциональная модель SADT, стандарт IDEFO, построение моделей IDEFO, дерево модели, презентационные диаграммы (FEO-диаграммы); метод описания процессов IDEF3, построение моделей IDEF3; метод структурного анализа потоков данных, построение диаграмм потоков данных DFD.\n3. Цели и принципы структурного и объектно-ориентированного программирования. Модульное программирование. Восходящий и нисходящий подход. Основные этапы разработки программ.  Классификация языков программирования, сравнительная характеристика. Алфавит, синтаксис, семантика языков программирования.\n'),(40,'1.  Графы: ориентированные и неориентированные графы, представление графов в ЭВМ, алгоритмы поиска минимального остовного дерева; компоненты связности; сильная связность; алгоритмы поиска кратчайших путей в графе.\n2.  Структуры данных: несвязанные, с неявными связями, с явными связями; иерархические модели Джексона-Орра; моделирование данных – диаграммы «сущность-связь» (ERD); метод Баркера; метод IDEF1.\n3. Системы планирования ресурсов предприятия (ERP). Основные понятия, принципы, подсистемы.\n'),(41,'1. Алгоритмы сортировки: методы внутренней  и внешней сортировки, анализ сложности и эффективности алгоритмов сортировки. \n2.  Структурная и функциональная схемы: структурные схемы пакетов программ, программного комплекса, программной системы; функциональная схема-схема данных, основные обозначения по ГОСТ 19.701-90; проектирование структуры программного обеспечения с использованием метода пошаговой детализации: основное правило и рекомендации по применению; структурные карты Константайна: назначение, типы вызовов модулей - последовательный, параллельный, вызов сопрограммы; особые условия вызова - циклический, условный,  однократный; диаграммы реализации параллельного вызова и вызова сопрограммы; типы связи – по данным, по управлению.\n3.  Методология внедрения ERP-систем.\n'),(42,'1. Алгоритмы поиска: последовательный, бинарный, интерполяционный поиск, использование деревьев в задачах поиска; хеширование с открытой и закрытой адресацией; алгоритмы поиска подстроки в строке. \n2. Проектирование структур данных: представление  данных в оперативной памяти – векторная структура, списковые структуры; представление данных во внешней памяти – способы организации данных с последовательным и прямым доступом; проектирование программного обеспечения с использованием методов декомпозиции данных: метод Джексона, метод Варнье-Орра.\n3. Математическая модель программы  - схема программы, как основной инструмент исследования свойств и преобразований программ. Стандартные схемы программ, понятие стандартной схемы, стандартные схемы в линейной и графовой формах, интерпретация схем, понятие программы, основные свойства стандартных схем. Разрешимые подклассы стандартных схем программ. \n'),(43,'1. Взаимодействие процессов: взаимодействие процессов через разделяемые ресурсы и общие данные, принципы организации взаимодействия процессов, классические задачи взаимодействия асинхронных процессов, динамика взаимодействия процессов и проблема тупиков, спецификация дисциплин взаимодействия процессов в терминах сетей Петри.\n2. Атрибутные транслирующие грамматики: синтаксически управляемые определения и схемы трансляции как способы записи семантических правил, связанных с продукциями грамматик, понятие атрибута, синтезируемые и наследуемые атрибуты, вычисление значений атрибутов, L-атрибутные и S-атрибутные транслирующие грамматики, реализация атрибутного перевода. \n3. Базовые стандарты и протоколы WWW: стандарты и протоколы передачи данных, форматы файлов Internet, используемые в WWW стандарты хранения данных, принципы поиска информации в Internet, использование поисковых систем, поиск тематической информации, путеводители по ресурсам.\n');
/*!40000 ALTER TABLE `cards` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `exammarks`
--

DROP TABLE IF EXISTS `exammarks`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `exammarks` (
  `markID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `memberID` int(10) unsigned NOT NULL,
  `studentID` int(10) unsigned NOT NULL,
  `examID` int(10) unsigned NOT NULL,
  `mark1` float unsigned DEFAULT NULL,
  `mark2` float unsigned DEFAULT NULL,
  `mark3` float unsigned DEFAULT NULL,
  `mark4` float unsigned DEFAULT NULL,
  `mark5` float unsigned DEFAULT NULL,
  `memberResultMark` float unsigned DEFAULT NULL,
  PRIMARY KEY (`markID`),
  KEY `memberIDForExamMarks` (`memberID`),
  KEY `studentIDForExamMarks` (`studentID`),
  KEY `examIDForExamMarks` (`examID`),
  CONSTRAINT `examIDForExamMarks` FOREIGN KEY (`examID`) REFERENCES `exams` (`examID`) ON UPDATE CASCADE,
  CONSTRAINT `memberIDForExamMarks` FOREIGN KEY (`memberID`) REFERENCES `sacmembers` (`memberID`) ON UPDATE CASCADE,
  CONSTRAINT `studentIDForExamMarks` FOREIGN KEY (`studentID`) REFERENCES `students` (`studentID`) ON UPDATE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=20 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `exammarks`
--

LOCK TABLES `exammarks` WRITE;
/*!40000 ALTER TABLE `exammarks` DISABLE KEYS */;
INSERT INTO `exammarks` VALUES (5,1,23,2,4,4,4,0,0,4),(6,1,24,2,1,1,1,1.77952e+09,2.25194e+06,0),(7,1,26,2,2,3,3,0,0,5),(8,1,28,2,5,5,5,0,0,5),(9,1,30,2,4,4,4,3,3,4),(10,2,32,2,4,4,4,0,0,4),(11,2,34,2,5,5,5,0,0,0),(12,1,34,2,5,5,5,5,5,5),(13,2,35,2,4,5,4,0,0,4),(14,1,35,2,4,4,4,4,3,4),(15,1,36,2,4,4,4,3,3,4),(16,2,36,2,4,4,4,0,0,4),(17,2,37,2,4,4,4,0,0,4),(18,1,37,2,5,4,4,4,4,4),(19,1,27,2,2,1,2,1.77952e+09,2.27231e+06,2);
/*!40000 ALTER TABLE `exammarks` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `exammemberlist`
--

DROP TABLE IF EXISTS `exammemberlist`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `exammemberlist` (
  `examID` int(10) unsigned NOT NULL,
  `memberID` int(10) unsigned NOT NULL,
  PRIMARY KEY (`examID`,`memberID`),
  KEY `memberIDForList` (`memberID`),
  CONSTRAINT `examIDForList` FOREIGN KEY (`examID`) REFERENCES `exams` (`examID`) ON UPDATE CASCADE,
  CONSTRAINT `memberIDForList` FOREIGN KEY (`memberID`) REFERENCES `sacmembers` (`memberID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `exammemberlist`
--

LOCK TABLES `exammemberlist` WRITE;
/*!40000 ALTER TABLE `exammemberlist` DISABLE KEYS */;
/*!40000 ALTER TABLE `exammemberlist` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `exams`
--

DROP TABLE IF EXISTS `exams`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `exams` (
  `examID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `typeID` int(10) unsigned NOT NULL,
  `examDate` datetime DEFAULT NULL,
  `beginTime` time DEFAULT NULL,
  `endTime` time DEFAULT NULL,
  `isCurrent` tinyint(1) NOT NULL,
  `presidentID` int(10) unsigned DEFAULT NULL,
  `secretaryID` int(10) unsigned DEFAULT NULL,
  PRIMARY KEY (`examID`),
  KEY `typeIDForExams` (`typeID`),
  KEY `presIDForExams` (`presidentID`),
  KEY `secrIDForExams` (`secretaryID`),
  CONSTRAINT `presIDForExams` FOREIGN KEY (`presidentID`) REFERENCES `sacmembers` (`memberID`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `secrIDForExams` FOREIGN KEY (`secretaryID`) REFERENCES `sacmembers` (`memberID`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `typeIDForExams` FOREIGN KEY (`typeID`) REFERENCES `examtypes` (`typeID`) ON UPDATE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `exams`
--

LOCK TABLES `exams` WRITE;
/*!40000 ALTER TABLE `exams` DISABLE KEYS */;
INSERT INTO `exams` VALUES (2,1,'2025-03-20 09:00:00',NULL,NULL,1,NULL,NULL);
/*!40000 ALTER TABLE `exams` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `examstudentlist`
--

DROP TABLE IF EXISTS `examstudentlist`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `examstudentlist` (
  `examID` int(10) unsigned NOT NULL,
  `studentID` int(10) unsigned NOT NULL,
  `cardNumber` int(10) unsigned DEFAULT NULL,
  `resultMark` int(10) unsigned DEFAULT NULL,
  `answersCharacteristic` varchar(500) CHARACTER SET utf8 COLLATE utf8_unicode_ci DEFAULT NULL,
  `specialOpinions` varchar(500) CHARACTER SET utf8 COLLATE utf8_unicode_ci DEFAULT NULL,
  `notes` varchar(500) CHARACTER SET utf8 COLLATE utf8_unicode_ci DEFAULT NULL,
  PRIMARY KEY (`examID`,`studentID`),
  KEY `examIDForStudentList` (`examID`),
  KEY `studentIDForStudentList` (`studentID`),
  KEY `cardNumberForStudentList` (`cardNumber`),
  CONSTRAINT `cardNumberForStudentList` FOREIGN KEY (`cardNumber`) REFERENCES `cards` (`cardNumber`) ON UPDATE CASCADE,
  CONSTRAINT `examIDForStudentList` FOREIGN KEY (`examID`) REFERENCES `exams` (`examID`) ON UPDATE CASCADE,
  CONSTRAINT `studentIDForStudentList` FOREIGN KEY (`studentID`) REFERENCES `students` (`studentID`) ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `examstudentlist`
--

LOCK TABLES `examstudentlist` WRITE;
/*!40000 ALTER TABLE `examstudentlist` DISABLE KEYS */;
/*!40000 ALTER TABLE `examstudentlist` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `examtypes`
--

DROP TABLE IF EXISTS `examtypes`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `examtypes` (
  `typeID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `typeName` varchar(100) CHARACTER SET utf8 COLLATE utf8_unicode_ci NOT NULL,
  PRIMARY KEY (`typeID`)
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `examtypes`
--

LOCK TABLES `examtypes` WRITE;
/*!40000 ALTER TABLE `examtypes` DISABLE KEYS */;
INSERT INTO `examtypes` VALUES (1,'Государственный экзамен'),(2,'Защита диплома');
/*!40000 ALTER TABLE `examtypes` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `groups`
--

DROP TABLE IF EXISTS `groups`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `groups` (
  `groupID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `groupName` varchar(7) CHARACTER SET utf8 COLLATE utf8_unicode_ci NOT NULL,
  `year_` year(4) NOT NULL,
  PRIMARY KEY (`groupID`)
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `groups`
--

LOCK TABLES `groups` WRITE;
/*!40000 ALTER TABLE `groups` DISABLE KEYS */;
INSERT INTO `groups` VALUES (1,'1ПО-52',2008),(2,'1ПО-51',2008),(3,'1ПО-52',2007);
/*!40000 ALTER TABLE `groups` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `sacmembers`
--

DROP TABLE IF EXISTS `sacmembers`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `sacmembers` (
  `memberID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `surname` varchar(45) CHARACTER SET utf8 COLLATE utf8_unicode_ci NOT NULL,
  `name` varchar(45) CHARACTER SET utf8 COLLATE utf8_unicode_ci NOT NULL,
  `patronymic` varchar(45) CHARACTER SET utf8 COLLATE utf8_unicode_ci NOT NULL,
  `business` varchar(400) CHARACTER SET utf8 COLLATE utf8_unicode_ci DEFAULT NULL,
  `username` varchar(15) CHARACTER SET utf8 COLLATE utf8_unicode_ci DEFAULT NULL,
  PRIMARY KEY (`memberID`)
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `sacmembers`
--

LOCK TABLES `sacmembers` WRITE;
/*!40000 ALTER TABLE `sacmembers` DISABLE KEYS */;
INSERT INTO `sacmembers` VALUES (1,'Селяничев1','Олег1','Леонидович1','1','test'),(2,'Селяничев2','Олег2','Леонидович2','СОЛ2','test2'),(3,'4','4','4','4',NULL),(4,'5','5','5','5',NULL);
/*!40000 ALTER TABLE `sacmembers` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `studentmarks`
--

DROP TABLE IF EXISTS `studentmarks`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `studentmarks` (
  `studentID` int(10) unsigned NOT NULL,
  `subjectID` int(10) unsigned NOT NULL,
  `mark` int(10) unsigned NOT NULL,
  PRIMARY KEY (`subjectID`,`studentID`),
  KEY `studentIDForMark` (`studentID`),
  CONSTRAINT `studentIDForMark` FOREIGN KEY (`studentID`) REFERENCES `students` (`studentID`) ON UPDATE CASCADE,
  CONSTRAINT `subjectIDForMark` FOREIGN KEY (`subjectID`) REFERENCES `subjects` (`subjectID`) ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `studentmarks`
--

LOCK TABLES `studentmarks` WRITE;
/*!40000 ALTER TABLE `studentmarks` DISABLE KEYS */;
/*!40000 ALTER TABLE `studentmarks` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `students`
--

DROP TABLE IF EXISTS `students`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `students` (
  `studentID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `studentNumber` int(10) unsigned NOT NULL,
  `surname` varchar(50) CHARACTER SET utf8 COLLATE utf8_unicode_ci NOT NULL,
  `name` varchar(50) CHARACTER SET utf8 COLLATE utf8_unicode_ci NOT NULL,
  `patronymic` varchar(50) CHARACTER SET utf8 COLLATE utf8_unicode_ci NOT NULL,
  `groupID` int(10) unsigned NOT NULL,
  PRIMARY KEY (`studentID`),
  KEY `groupIDForStudent` (`groupID`),
  CONSTRAINT `groupIDForStudent` FOREIGN KEY (`groupID`) REFERENCES `groups` (`groupID`) ON UPDATE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=38 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `students`
--

LOCK TABLES `students` WRITE;
/*!40000 ALTER TABLE `students` DISABLE KEYS */;
INSERT INTO `students` VALUES (1,1,'Баданин','Дмитрий','Николаевич',2),(2,2,'Баландин','Олег','Викторович',2),(3,3,'Валова','Юлия','Анатольевна',2),(4,4,'Витушкин','Антон','Александрович',2),(5,5,'Горбунов','Александр','Александрович',2),(6,6,'Евсевьев','Артем','Сергеевич',2),(7,7,'Зайцева','Анастасия','Михайловна',2),(8,8,'Ипатова','Юлия','Михайловна',2),(9,9,'Казунин','Олег','Игоревич',2),(10,10,'Карпов','Александр','Валентинович',2),(11,11,'Крюкова','Софья','Владимировна',2),(12,12,'Михайлов','Алексей','Викторович',2),(13,13,'Морозова','Юлия','Николаевна',2),(14,14,'Новикова','Юлия','Николаевна',2),(15,15,'Попова','Ирина','Александровна',2),(16,16,'Сенина','Алена','Игоревна',2),(17,17,'Смирнов','Дмитрий','Юрьевич',2),(18,18,'Тарасова','Наталия','Владимировна',2),(19,19,'Трошичев','Александр','Николаевич',2),(20,20,'Юлина','Анна','Валерьевна',2),(21,21,'Бекешкин','Николай','Николаевич',1),(22,22,'Беляков','Юрий','Константинович',1),(23,23,'Брусова','Тамара','Анатольевна',1),(24,24,'Васильев','Сергей','Владимирович',1),(25,25,'Егоров','Владимир','Сергеевич',1),(26,26,'Зайцев','Валерий','Викторович',1),(27,27,'Зарубин','Михаил','Александрович',1),(28,28,'Кушников','Сергей','Николаевич',1),(29,29,'Лебедев','Алексей','Александрович',1),(30,30,'Муравьев','Артем','Валерьевич',1),(31,31,'Попов','Ярослав','Владимирович',1),(32,32,'Селяков','Сергей','Николаевич',1),(33,33,'Сизьмина','Анастасия','Николаевна',1),(34,34,'Теричев','Алексей','Александрович',1),(35,35,'Федосов','Дмитрий','Николаевич',1),(36,36,'Храброва','Екатерина','Павловна',1),(37,37,'Яковлева','Варвара','Юрьевна',1);
/*!40000 ALTER TABLE `students` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `subjects`
--

DROP TABLE IF EXISTS `subjects`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `subjects` (
  `subjectID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `subjectName` varchar(150) NOT NULL,
  PRIMARY KEY (`subjectID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `subjects`
--

LOCK TABLES `subjects` WRITE;
/*!40000 ALTER TABLE `subjects` DISABLE KEYS */;
/*!40000 ALTER TABLE `subjects` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `themes`
--

DROP TABLE IF EXISTS `themes`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `themes` (
  `themeID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `theme` varchar(1000) CHARACTER SET utf8 COLLATE utf8_unicode_ci NOT NULL,
  `studentID` int(10) unsigned NOT NULL,
  `consultantID` int(10) unsigned DEFAULT NULL,
  `instructorID` int(10) unsigned DEFAULT NULL,
  PRIMARY KEY (`themeID`),
  KEY `studentIDForThemes` (`studentID`),
  KEY `consultantIDForThemes` (`consultantID`),
  KEY `instructorIDForThemes` (`instructorID`),
  CONSTRAINT `consultantIDForThemes` FOREIGN KEY (`consultantID`) REFERENCES `sacmembers` (`memberID`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `instructorIDForThemes` FOREIGN KEY (`instructorID`) REFERENCES `sacmembers` (`memberID`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `studentIDForThemes` FOREIGN KEY (`studentID`) REFERENCES `students` (`studentID`) ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `themes`
--

LOCK TABLES `themes` WRITE;
/*!40000 ALTER TABLE `themes` DISABLE KEYS */;
/*!40000 ALTER TABLE `themes` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Dumping routines for database 'assistant_schema'
--
/*!50003 DROP PROCEDURE IF EXISTS `setCardNumber` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `setCardNumber`(
IN exam INT,
IN student INT,
IN cardNum INT
)
BEGIN
UPDATE examstudentlist SET cardNumber=cardNum WHERE examID=exam AND studentID=student;
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `setMarks` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `setMarks`(
IN student INT,
IN member INT,
IN exam INT,
IN nmark1 INT,
IN nmark2 INT,
IN nmark3 INT,
IN nmark4 INT,
IN nmark5 INT,
IN resMark INT
)
BEGIN
IF EXISTS (SELECT * FROM exammarks WHERE 
memberID=member AND studentID=student AND examID=exam LIMIT 1) THEN
	UPDATE exammarks SET mark1=nmark1, mark2=nmark2,
	mark3=nmark3, mark4=nmark4, mark5=nmark5, 
	memberResultMark=resMark
	WHERE memberID=member AND studentID=student AND examID=exam;
ELSE
	INSERT INTO exammarks
	(memberID, studentID, examID, mark1, mark2, mark3, mark4, mark5, memberResultMark)
	VALUES (member, student, exam, nmark1, nmark2, nmark3, nmark4, nmark5, resMark);
END IF;

END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2009-05-17 11:41:01
